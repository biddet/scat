#!/usr/bin/env php
<?php
require __DIR__.'/../scat.php';
require __DIR__.'/../lib/txn.php';

$exit= 0;

$client= new \GuzzleHttp\Client();

\EasyPost\EasyPost::setApiKey(EASYPOST_KEY);

$url= ORDURE . '/sale/list';
try {
  $res= $client->request('GET', $url,
                         [
                           'debug' => $DEBUG,
                           'query' => [ 'key' => ORDURE_KEY,
                                        'json' => 1 ]
                         ]);
} catch (\GuzzleHttp\Exception\ConnectException $ex) {
  exit;
}

$sales= json_decode($res->getBody());

foreach ($sales as $summary) {
  if ($summary->status != 'paid') {
    continue;
  }

  try {

    $url= ORDURE . '/sale/' . $summary->uuid . '/json';
    $res= $client->request('GET', $url,
                           [
                             'debug' => $DEBUG,
                             'query' => [ 'key' => ORDURE_KEY ]
                           ]);

    $data= json_decode($res->getBody());

    ORM::get_db()->beginTransaction();

    $person= Model::factory('Person')->where('email', $data->sale->email)
                                     ->where('active', 1)
                                     ->find_one();

    /* Didn't find them? Create them. */
    if (!$person) {
      $person= Model::factory('Person')->create();
      $person->name= $data->sale->name;
      $person->email= $data->sale->email;
      $person->save();

      echo "Created new person '{$person->name}'.\n";
    }
    /* Otherwise update name, email */
    else {
      if ($data->sale->name) $person->name= $data->sale->name;
      if ($data->sale->email) $person->email= $data->sale->email;
      $person->save();

      echo "Updated details for person '{$person->name}'.\n";
    }

    $number= ORM::for_table('txn')->where('type', 'customer')->max('number');

    /* Create the base transaction */
    $txn= Model::factory('Txn')->create();
    $txn->uuid= $data->sale->uuid;
    $txn->number= $number + 1;
    $txn->created= $data->sale->created;
    $txn->filled= $data->sale->modified;
    $txn->paid= $data->sale->modified;
    $txn->type= 'customer';
    $txn->person_id= $person->id;
    $txn->tax_rate= 0.0;

    $txn->save();

    /* Add items */
    foreach ($data->items as $item) {
      $txn_line= Model::factory('TxnLine')->create();
      $txn_line->txn= $txn->id;
      $txn_line->item= $item->item_id;
      $txn_line->ordered= $txn_line->allocated= -1 * ($item->quantity);
      $txn_line->override_name= $item->override_name;
      $txn_line->retail_price= $item->retail_price;
      $txn_line->discount_type= $item->discount_type;
      $txn_line->discount= $item->discount;
      $txn_line->discount_manual= $item->discount_manual;
      $txn_line->tic= $item->tic;
      $txn_line->tax= $item->tax;
      $txn_line->save();
    }

    /* Add shipping item */
    if ($data->sale->shipping) {
      $item= Model::factory('Item')
               ->where('code','ZZ-SHIPPING-CUSTOM')
               ->find_one();

      $txn_line= Model::factory('TxnLine')->create();
      $txn_line->txn= $txn->id;
      $txn_line->item= $item->id;
      $txn_line->ordered= $txn_line->allocated= -1;
      $txn_line->tic= $item->tic;
      $txn_line->retail_price= $data->sale->shipping;
      $txn_line->tax= $data->sale->shipping_tax;
      $txn_line->save();
    }

    /* Add payments */
    foreach ($data->payments as $pay) {
      $payment= Model::factory('Payment')->create();
      $payment->txn= $txn->id;
      $payment->method= ($pay->method == 'credit') ? 'stripe' : $pay->method;
      $payment->amount= $pay->amount;
      $payment->processed= $pay->processed;
      $payment->save();
    }

    /* Add a note */
    $note= Model::factory('Note')->create();
    $note->kind= 'txn';
    $note->attach_id= $txn->id;
    if ($data->sale->shipping_address_id == 1) {
      $note->content= "Need to pick for in-store pick-up. Contact customer when ready!";
    } else {
      $note->content= "Need to pick & ship online order.";
    }
    $note->todo= 1;
    $note->save();

    /* Add shipping address */
    if ($data->sale->shipping_address_id != 1) {
      $easypost_address= \EasyPost\Address::create([
        'name' => $data->shipping_address->name,
        'company' => $data->shipping_address->company,
        'street1' => $data->shipping_address->address1,
        'street2' => $data->shipping_address->address2,
        'city' => $data->shipping_address->city,
        'state' => $data->shipping_address->state,
        'zip' => $data->shipping_address->zip5,
        'country' => 'US',
        'phone' => $data->shipping_address->phone,
      ]);

      $address= Model::factory('Address')->create();
      $address->easypost_id= $easypost_address->id;
      $address->name= $easypost_address->name;
      $address->company= $easypost_address->company;
      $address->street1= $easypost_address->street1;
      $address->street2= $easypost_address->street2;
      $address->city= $easypost_address->city;
      $address->state= $easypost_address->state;
      $address->zip= $easypost_address->zip;
      $address->country= $easypost_address->country;
      $address->phone= $easypost_address->phone;
      $address->save();

      $txn->shipping_address_id= $address->id;
      $txn->save();
    }

    $url= ORDURE . '/sale/' . $summary->uuid . '/set-status';
    $res= $client->request('POST', $url,
                           [
                             'debug' => $DEBUG,
                             'headers' => [
                               'X-Requested-With' => 'XMLHttpRequest',
                             ],
                             'form_params' => [
                               'key' => ORDURE_KEY,
                               'status' => 'processing'
                             ]
                           ]);

    ORM::get_db()->commit();

    echo "Created transaction for sale {$data->sale->id}.\n";
  }
  catch (Exception $e) {
    ORM::get_db()->rollBack();
    throw $e;
  }
}

exit($exit);
