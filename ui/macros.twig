{% macro amount(d) %}
  {{- d < 0 ? '(' }}${{ d | abs | number_format(2, '.', ',') }}{{ d < 0 ? ')' -}}
{% endmacro %}

{% macro format_discount(item) %}
  {%- import _self as scat -%}
  {%- if item.discount_type == 'percentage' -%}
    {{ item.discount|number_format(0) }}% off
  {%- endif -%}
  {%- if item.discount_type == 'additional_percentage' -%}
    +{{ item.discount|number_format(0) }}% off
  {%- endif -%}
  {%- if item.discount_type == 'relative' -%}
    {{ scat.amount(item.discount) }} off
  {%- endif -%}
  {%- if item.discount_type == 'fixed' -%}
    {{ scat.amount(item.discount) }}
  {%- endif -%}
{% endmacro %}

{% macro format_txn_status(status) %}
  {%- if status == 'new' -%}
    <span class="text-default">New</span>
  {%- elseif status == 'filled' -%}
    <span class="text-default">Filled</span>
  {%- elseif status == 'paid' -%}
    <span class="text-danger">Paid</span>
  {%- elseif status == 'processing' -%}
    <span class="text-danger">Processing</span>
  {%- elseif status == 'shipped' -%}
    <span class="text-success">Shipped</span>
  {%- elseif status == 'complete' -%}
    <span class="text-success">Complete</span>
  {%- elseif status == 'template' -%}
    Template
  {%- else -%}
    <span class="text-danger">Unknown</span>
  {%- endif -%}
{% endmacro %}

{% macro file_upload(dest) %}
<style>
#droptarget {
  position: absolute;
  z-index: 100000;
  top: 0; left; 0;
  height: 100%;
  width: 100%;
  background: rgba(0,0,0,0.6);
  padding: 0;
  margin: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}
#droptarget h1 {
  color: #fff;
  font-size: 6em;
  max-width: 50%;
}
#droptarget, #droptarget * {
  pointer-events: none;
}
</style>
<div id="droptarget" style="display:none">
  <h1>Drop file(s) to upload.</h1>
</div>
<script>
  let dropArea= document.currentScript.parentNode

  let preventDefaults= (ev) => {
    if (ev.dataTransfer.files.length ||
        ev.dataTransfer.types.includes('Files') ||
        ev.dataTransfer.types.includes('text/uri-list'))
    {
      ev.preventDefault()
      ev.stopPropagation()
    }
  }

  ['dragenter', 'dragleave', 'dragend','dragover', 'drop']
  .forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults)
  })

  let handleEnter= (ev) => {
    document.getElementById('droptarget').style.display= 'flex'
  }
  ['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, handleEnter)
  })

  let handleExit= (ev) => {
    document.getElementById('droptarget').style.display= 'none'
  }
  ['dragleave', 'dragend'].forEach(eventName => {
    dropArea.addEventListener(eventName, handleExit)
  })

  dropArea.addEventListener('drop', (ev) => {
    let dt= ev.dataTransfer
    let files= dt.files;

    document.getElementById('droptarget').style.display= 'none'

    const url= '{{ dest }}'
    const formData= new FormData()

    let fileUrl= dt.getData('text/uri-list')
    if (!fileUrl) fileUrl= dt.getData('text/plain')

    if (fileUrl) {
      formData.append('url', fileUrl)
    } else if (files.length) {
      formData.append('file', files[0])
    }

    if (!formData.has('file') && !formData.has('url')) {
      return Promise.reject(new Error("No file dropped."))
    }

    scat.dialog([], '/dialog/file-upload.html')
    .then((modal) => {
      return fetch(url, {
        method: 'POST',
        headers: { 'Accept': 'application/json' },
        body: formData
      })
      .then((response) => {
        if (response.status >= 200 && response.status < 300) {
          return Promise.resolve(response)
        }
        return Promise.reject(new Error(response.statusText))
      })
      .finally((res) => {
        modal.modal('hide')
      })
    })
    .then((res) => {
      window.location.reload()
    })
    .catch((res) => {
      alert("Sorry, there was a problem with the upload.")
    })
  })
</script>
{% endmacro %}
